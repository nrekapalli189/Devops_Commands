#Default working directory of docker
/var/lib/docker

#To view created images
docker images

#To view sample images available in docker registry
docker search tomcat
docker search nginx
docker search wordpress

#To pull(download) an image from docker registry
docker pull tomcat

#To create a dockerfile
vi dockerfile

#To build an docker image
docker build -t App:1.0 .
docker build -t App:2.0 -f dockerfile .
-t tagname
The -t flag lets you tag your image so it's easier to find later using the docker images command
-f ilename
. means dockerfile exits in pwd
#To spin up a docker container
docker run -d -p 85:80 App:2.0 
docker run -d -p 85:80 imageid
-d detached mode
Running your image with -d runs the container in detached mode, leaving the container running in the background
-p port number
-p flag redirects a public port to a private port inside the container.

#To view running containers
docker ps

#To view both stopped and running containers
docker ps -a

#To start/stop a container
docker start containerID
docker stop coontainerID

#To know the details of a container/volume/network
docker inspect containerID/name
docker inspect volumeID/name
docker inspect networkID/name

#To go inside a docker container
docker exec -it containerID /bin/bash or /sh

#To go directly inside the container while spinning up 
docker run -it -d <imageName/ID> 

#To check image hitory
docker history imageName/ID

#To check container logs
docker logs containerID

#To check CPU and memory consumption of particular container ID
docker stats containerID

#To push an image ro dockerhub/regitry
docker push username/reponame:tagname

#Command to login into dockerhub/re3gistry
docker login

#Docker volume commands
docker volume create naga
docker volume ls
docker volume inspect naga

#To attach named volume
docker run -it -v vol1:/opt/naga1 <imageName> /bin/bash
vol1-new volume
/opt/naga1-directory in container

#Another example
docker run --name myjenkins -v naga:/var/jenkins_home -p 8070:8080 -p 50000:50000 jenkins/jenkins
Jenkins/Jenkins-image name
Naga-volume
/var/Jenkins_home- Jenkins def directory
Myjenkins1-container name
-p -port number
8071:8080-port for webservers
50001:50000- jnlp port number, it’s default port number for every application.

#To attach hosted volume
docker run -it -v /opt/docker:/opt/mountdir <imagename> /bin/bash
/opt/docker is a shared/hosted volume 
/opt/d1 is a container volume.
Basically, here you don’t create a new volume, you just attach a local volume to container volume. 

#We are running Jenkins image by attaching ‘naga’ volume
docker run --name myjenkins -v naga:/var/jenkins_home -p 8070:8080 -p 50000:50000 jenkins/jenkins
/var/Jenkins_home- Jenkins def directory

#docker network commands
docker network ls
docker network create naga
docker network inspect naga
docker network inspect bridge

#remove a container from a network by disconnecting the container
docker network disconnect bridge networktest
bridge-default network
networktest-container name
Note: container Id can also be used instead of container name

# To create your own bridge network
docker network create -d bridge my_bridge
The -d flag tells Docker to use the bridge driver for the new network.

#To add containers to a network
 docker run -d --net=my_bridge --name db training/postgres
training/postgres-Image name
db-container name
--net=my_bridge -network name which we created

#To add neetwork to a running container
docker network connect my_bridge web
my_bridge-network name
web-container name

#To inspect in json format
docker inspect --format='{{json .NetworkSettings.Networks}}'  db

#command to check the memory
df -h

#To delete all containers
docker rm $(docker ps -aq)

#To delete single container
docker rm <containerID/name>

#To delete all images
docker rmi $(docker images -q)

#To delete single image
docker rmi <imageID/name>

#To delete all untagged images
docker rmi $(docker images -q --filter "dangling=true")

#docker-compose commands
#To start multiple conyainers at a time
docker-compose up -d

#To check logs of a specific container
docker logs <containerName/ID>

#To check errors in container
docker logs <containerName/ID> | grep -i Error

#To check if specific container is up or not
docker ps -a | grep -i <containerName/ID>

#Command to create image from container
docker commit <containerID> <newIamgeName>

#How to copy a file to a container
docker cp <filename>(SOURCE) <containerID>:/tmp(destination)

#how to tag an image with dockerhub username
docker tag <currentImageName> <newImageName>
docker tag webserver1.0 nrekapalli189/webserver:latest

Webserver:1.0 -existing image name
nrekapalli189-docker hub username
Webserver-repo name
Latest-new image name

##From Chintu Notes
docker run -it –name nginx-container -h nginx.host1.com -p 99:80 nginx:latest
docker run -d –name nginx-container1 -h nginx.host1.com -p 999:80 nginx:latest

--name name of the container
-h hostname
-it means interactive mode(can pass input such as bin/bash, /sh)
-d detached mode(runs in the background)

#To view only container IDs
docker ps -q
docker ps -qa

#To go inside the running container
Docker exec -it containerID /bin/bash
#To come out of the container
Exit

#To view complete metadata of a container
Docker inspect containerID

#To create a new file inside the docker container without actually going inside it
Docker exec -d containerID /bin/bash -c “touch /opt/file1.txt

## Kill/shutdown our running container
docker kill <container id>

# Confirm that the app has stopped or running
$ curl -i localhost:49160
curl: (7) Failed to connect to localhost port 49160: Connection refused

#To delete all containers
docker rm $(docker ps -aq)
#To delete all images
docker rmi $(docker images -q)
#To delete all untagged images
docker rmi $(docker images -q --filter "dangling=true"
