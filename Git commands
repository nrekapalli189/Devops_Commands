mkdir gitpractice
cd gitpractice
git init
//working tree
touch file1.txt
//Index/staging area
git add file1.txt

git config --global user.name "nrekapalli189"
git config --global user.email "nrekapalli189@gmail.com"
//local repository
git commit -m "first change"
git status

//commit history
git log
git log --oneline

//To add only modified files to index/staging area and leave untracked files, the command is 
git add -u

//to add all the changes to index/staging area irrespective of in which folder you present within repository, the command is
git add -A

//to move files back to working tree from staging/index area
git reset file1.txt
//Alterntive command
git restore --staged file1.txt

//Now if we want to remove the files/changes in working tree as well
git restore file1.txt

//To remove all the changes in both index/staging area and working tree at one shot
git reset --hard

//To remove untracked(new) files in working tree ('git reset --hard' can't touch untracked files)
git clean -fd .
fd-force delete
.-all in WT

//to need help on some command
git reset --help

//Git log commands

git log --all (to display all commits)
git log -2 (last/previous 2 commits)

git log --author naga (To filter commits done by specific author/developer)

git log --after 1.days.ago (To filter by date) (in last 24 hours)
git log --before 1.days.ago (until yesterday)
git log --after "yyyy-mm-dd"
git log --before "yyyy-mm-dd"
git log --after "yyyy-mm-dd" --before "yyyy-mm-dd" (In between)

git log -p (To view all the changes done in each commit)

git log --stat (To view summary of each commit)

git log --graph

//branch commands
git branch (to list exiting branches)
git branch <branchname> (to create new branch)
git checkout <branchname> to switch branches)
git checkout -b <newbranchname>  (to create nb and switch at one shot)

//merge command 
git merge <sourcebranchname> (Note: to perform merge, we should be in destination branch)
//To resolve conflicts
git merge --continue

//rebase command
git rebase <sourchbranchname> (Note: to perform rebase, we sshould be in detination branch)
//To resolve conflicts
git rebase --continue

//cherry-pick
git cherry-pick <specificCOMMITid> (Note: to perform cherry-pick, we should be in the branch to which you want to apply cherry-pick)
//To resolve conflicts
git cherry-pick --continue

//to view the contents/author/date of a commit
git cat-file -p <fullcommitID>
git cat-file -t <ullcommitID>

//command to setup connection b/w local and remote repo
git remote add origin <repoUL>
Origin-namee of def remote repo

//git push
git push origin <branchname>
//to push all branches at a time
git push --all origin

//clone
git clone <repoURL>

//to display remote repo branches
git branch -r





