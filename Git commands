mkdir gitpractice
cd gitpractice
git init
//working tree
touch file1.txt
//Index/staging area
git add file1.txt

git config --global user.name "nrekapalli189"
git config --global user.email "nrekapalli189@gmail.com"
//local repository
git commit -m "first change"
git status

//commit history
git log
git log --oneline

//To add only modified files to index/staging area and leave untracked files, the command is 
git add -u

//to add all the changes to index/staging area irrespective of in which folder you present within repository, the command is
git add -A

//to move files back to working tree from staging/index area
git reset file1.txt
//Alterntive command
git restore --staged file1.txt

//Now if we want to remove the files/changes in working tree as well(works for only modified files, can't touch untracked)
git restore file1.txt

//To remove all the changes in both index/staging area and working tree at one shot ((works for only modified files, can't touch untracked)
git reset --hard

//To remove untracked(new) files in working tree ('git reset --hard' can't touch untracked files)
git clean -fd .
fd-force delete
.-all in WT

//to need help on some command
git reset --help

//To revert the changes and go back to particular commit
git reset <commitID> --hard
<commitID> -is where you want go back in the past, chnages you have done after this commitID will be erased. 


//Git log commands

git log --all (to display all commits)
git log -2 (last/previous 2 commits)

git log --author naga (To filter commits done by specific author/developer)

git log --after 1.days.ago (To filter by date) (in last 24 hours)
git log --before 1.days.ago (until yesterday)
git log --after "yyyy-mm-dd"
git log --before "yyyy-mm-dd"
git log --after "yyyy-mm-dd" --before "yyyy-mm-dd" (In between)

git log -p (To view all the changes done in each commit)

git log --stat (To view summary of each commit)

git log --graph
git log --graph --all


//branch commands
git branch (to list exiting branches)
git branch <branchname> (to create new branch)
git checkout <branchname> to switch branches)
git checkout -b <newbranchname>  (to create nb and switch at one shot)
git branch -r (to list exiting branches in remote repo like GitHub)

//merge command 
git merge <sourcebranchname> (Note: to perform merge, we should be in destination branch)
//To resolve conflicts
git merge --continue

//rebase command
git rebase <sourchbranchname> (Note: to perform rebase, we sshould be in detination branch)
//To resolve conflicts
git rebase --continue

//cherry-pick
git cherry-pick <specificCOMMITid> (Note: to perform cherry-pick, we should be in the branch to which you want to apply cherry-pick)
//To resolve conflicts
git cherry-pick --continue

//to view the contents/author/date of a commit
git cat-file -p <fullcommitID>
git cat-file -t <ullcommitID>

//command to setup connection b/w local and remote repo
git remote add origin <repoUL>
Origin-namee of def remote repo

//git push
git push origin <branchname>
//to push all branche chnages at a time
git push --all origin

//clone
git clone <repoURL>
#To clone particular branch
git clone -b <bn> <repourl>

//to display remote repo branches
git branch -r

//Additional commands
#when you are trying to checkk out to new branch and if it is throwing below error
error: pathspec 'branchname' did not find any filles known to git
command: git remote update

#To modify incorrect uername and useremail which are used for commit
git commit --amend --reset-author

#To create Annotated tags
git tag -a "23r4" -m "This is 4th release commit id released to production"
-a specifies annotated tag
-m specifies a tagging message, which is stored with the tag
#To see the Tag details
git show 23r4
#To list the existing Tags
git tag
#To search for tags that match a particular pattern
git tag -l "23*"
-l or --list
#To tag old commits
git tag -a 23r1 <commitid>
#To push tags to remote server(GitHub)
git push origin <tagname>
#To push multiple tags
git push origin --tags
#To delete tag
git tag -d <tagname>
#To remove tag in remote server
git push origin :refs/tags/<tagname>
git push origin --delete <tagname>
#Checking out Tags
git checkout 23r3
git switch -c <new-branch-name>
git checkout -b version2 v2.0.0

##To change the previous commits
#To move the Head back to 3 positions
git rebase -i HEAD~3
-i specify interactive rebasing
#If you want to modify commit message of latest commit
git commit --amend

##stash(fifth area of git)
used to store unfinished work in fifth area in git temp
#To move code from index/staging area to stash area
git stash
#To retrieve back to index area and remove it in stash area(when you move code from staging area to stash, and retrive it back, it will go to index area, not to staging)
git stash pop
#To see the list in fifth/stash area
git stash list
#To retrieve back to index area and keep it in stash area as well
git stash apply

Frequently used
gir clone <repoURL>
git remote update
git checkout <bn>
git checkout -b <bn>
git pull origin <bn>
git add .
git commit -m "message"
git push origin <bn>


